import asyncio
import logging
import sqlite3
from datetime import datetime, timedelta
from typing import List, Dict, Any
import random
from pathlib import Path
import csv
import json
import os
from dotenv import load_dotenv
import aiohttp

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –î–ª—è —Ä–∞–±–æ—Ç—ã —Å Excel
try:
    import openpyxl
    from openpyxl.styles import Font, PatternFill, Alignment
    EXCEL_AVAILABLE = True
except ImportError:
    EXCEL_AVAILABLE = False
    logging.warning("openpyxl –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –≠–∫—Å–ø–æ—Ä—Ç –±—É–¥–µ—Ç –≤ CSV —Ñ–æ—Ä–º–∞—Ç–µ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN", "8056583131:AAH9qRCnWHcFKBkpmjTRk_zVGlHjCOx58Fs")
WEBAPP_URL = os.getenv("WEBAPP_URL", "https://raffle-app.onrender.com")
API_URL = os.getenv("API_URL", "https://raffle-api.onrender.com")
ADMIN_IDS = [int(id) for id in os.getenv("ADMIN_IDS", "888007035").split(",")]

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class RaffleStates(StatesGroup):
    waiting_title = State()
    waiting_description = State()
    waiting_photo = State()
    waiting_channels = State()
    waiting_prizes = State()
    waiting_end_datetime = State()
    waiting_prize_details = State()

class APIClient:
    """–ö–ª–∏–µ–Ω—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å API"""
    
    def __init__(self, api_url: str):
        self.api_url = api_url
        self.session = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def create_raffle(self, raffle_data: dict) -> dict:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ —á–µ—Ä–µ–∑ API"""
        async with aiohttp.ClientSession() as session:
            url = f"{self.api_url}/api/admin/raffles"
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö
            api_data = {
                "title": raffle_data['title'],
                "description": raffle_data['description'],
                "photo_url": raffle_data.get('photo_url', ''),
                "channels": raffle_data['channels'].split() if raffle_data['channels'] else [],
                "prizes": raffle_data['prizes'],
                "end_date": raffle_data['end_date'].isoformat(),
                "draw_delay_minutes": 5
            }
            
            try:
                async with session.post(url, json=api_data) as response:
                    if response.status == 200:
                        return await response.json()
                    else:
                        error_text = await response.text()
                        raise Exception(f"API error {response.status}: {error_text}")
            except aiohttp.ClientError as e:
                logger.error(f"Network error: {e}")
                raise Exception(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}")
    
    async def get_active_raffles(self) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
        async with aiohttp.ClientSession() as session:
            url = f"{self.api_url}/api/raffles/active"
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
                    return []
            except:
                return []
    
    async def get_completed_raffles(self, limit: int = 10) -> List[dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
        async with aiohttp.ClientSession() as session:
            url = f"{self.api_url}/api/raffles/completed?limit={limit}"
            try:
                async with session.get(url) as response:
                    if response.status == 200:
                        return await response.json()
                    return []
            except:
                return []

class LocalDatabaseManager:
    """–õ–æ–∫–∞–ª—å–Ω–∞—è –±–∞–∑–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    
    def __init__(self, db_path: str = "/app/data/bot_users.db"):
        self.db_path = db_path
        os.makedirs(os.path.dirname(db_path), exist_ok=True)
        self.init_database()
    
    def init_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–æ—Ç–∞
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bot_users (
                    user_id INTEGER PRIMARY KEY,
                    username TEXT,
                    first_name TEXT,
                    last_name TEXT,
                    notifications_enabled INTEGER DEFAULT 0,
                    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            conn.commit()
    
    def add_user(self, user_id: int, username: str, first_name: str, last_name: str):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('''
                INSERT OR REPLACE INTO bot_users (user_id, username, first_name, last_name)
                VALUES (?, ?, ?, ?)
            ''', (user_id, username, first_name, last_name))
            conn.commit()
    
    def toggle_notifications(self, user_id: int) -> bool:
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT notifications_enabled FROM bot_users WHERE user_id = ?', (user_id,))
            result = cursor.fetchone()
            
            new_status = 0 if result and result[0] else 1
            cursor.execute('UPDATE bot_users SET notifications_enabled = ? WHERE user_id = ?', (new_status, user_id))
            conn.commit()
            
            return bool(new_status)
    
    def get_users_with_notifications(self) -> List[int]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
        with sqlite3.connect(self.db_path) as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT user_id FROM bot_users WHERE notifications_enabled = 1')
            return [row[0] for row in cursor.fetchall()]

# –°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
db = LocalDatabaseManager()
api_client = APIClient(API_URL)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def create_main_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )
    return keyboard

def create_admin_keyboard():
    """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üì¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")],
            [KeyboardButton(text="üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")],
            [KeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à")],
            [KeyboardButton(text="üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")],
            [KeyboardButton(text="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")]
        ],
        resize_keyboard=True
    )
    return keyboard

async def upload_photo_to_api(photo_file_id: str) -> str:
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä —á–µ—Ä–µ–∑ Telegram API"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–∞–π–ª –æ—Ç Telegram
        file = await bot.get_file(photo_file_id)
        file_path = file.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_url = f"https://api.telegram.org/file/bot{BOT_TOKEN}/{file_path}"
        
        async with aiohttp.ClientSession() as session:
            async with session.get(file_url) as resp:
                if resp.status == 200:
                    file_data = await resp.read()
                    
                    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞ –Ω–∞—à —Å–µ—Ä–≤–µ—Ä
                    form = aiohttp.FormData()
                    form.add_field('file',
                                 file_data,
                                 filename='raffle_image.jpg',
                                 content_type='image/jpeg')
                    
                    async with session.post(f"{API_URL}/api/admin/upload-image", data=form) as upload_resp:
                        if upload_resp.status == 200:
                            result = await upload_resp.json()
                            return f"{API_URL}{result['url']}"
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º file_id
        return photo_file_id
    except Exception as e:
        logger.error(f"Error uploading photo: {e}")
        return photo_file_id

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = message.from_user
    db.add_user(user.id, user.username, user.first_name, user.last_name)
    
    keyboard = create_admin_keyboard() if user.id in ADMIN_IDS else create_main_keyboard()
    
    await message.answer(
        f"üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}!\n\n"
        "üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π!\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
        "‚Ä¢ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö –ø—Ä–∏–∑–æ–≤\n"
        "‚Ä¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö\n"
        "‚Ä¢ –°–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø—Ä–æ—à–ª—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π\n"
        "‚Ä¢ –°–ª–µ–¥–∏—Ç—å –∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=keyboard
    )

@dp.message(F.text == "üì¢ –ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è")
async def manage_notifications(message: types.Message):
    """–ü–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"""
    user_id = message.from_user.id
    notifications_enabled = db.toggle_notifications(user_id)
    
    status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if notifications_enabled else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
    await message.answer(
        f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}\n\n"
        f"{'–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö!' if notifications_enabled else '–í—ã –±–æ–ª—å—à–µ –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö.'}"
    )

@dp.message(F.text == "üéØ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏")
async def show_active_raffles(message: types.Message):
    """–ü–æ–∫–∞–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
    try:
        raffles = await api_client.get_active_raffles()
        
        if not raffles:
            await message.answer("üòî –°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏!")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –∞–∫—Ç–∏–≤–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à
        raffle = raffles[0]
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_date = datetime.fromisoformat(raffle['end_date'].replace('Z', '+00:00'))
        end_date_str = end_date.strftime("%d.%m.%Y –≤ %H:%M")
        
        # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è —É—á–∞—Å—Ç–∏—è —Å Web App
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(
                text="üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å", 
                web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/raffle/{raffle['id']}")
            )]
        ])
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–∑—ã
        prizes_text = "\n".join([f"{pos}. {prize}" for pos, prize in raffle.get('prizes', {}).items()])
        
        caption = (
            f"üéâ **{raffle['title']}**\n\n"
            f"{raffle['description']}\n\n"
            f"üèÜ **–ü—Ä–∏–∑—ã:**\n{prizes_text}\n\n"
            f"‚è∞ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_date_str}\n"
            f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {raffle.get('participants_count', 0)}"
        )
        
        if raffle.get('photo_url'):
            await message.answer_photo(
                photo=raffle['photo_url'],
                caption=caption,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
        else:
            await message.answer(caption, reply_markup=keyboard, parse_mode="Markdown")
            
    except Exception as e:
        logger.error(f"Error showing active raffles: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π")
async def show_history(message: types.Message):
    """–ü–æ–∫–∞–∑ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π"""
    try:
        history = await api_client.get_completed_raffles(limit=10)
        
        if not history:
            await message.answer("üìú –ò—Å—Ç–æ—Ä–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—É—Å—Ç–∞")
            return
        
        history_text = "üìú **–ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π:**\n\n"
        
        for raffle in history:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            end_date = datetime.fromisoformat(raffle['end_date'].replace('Z', '+00:00'))
            date_str = end_date.strftime("%d.%m.%Y")
            
            history_text += f"üéØ **{raffle['title']}**\n"
            history_text += f"üìÖ –ó–∞–≤–µ—Ä—à–µ–Ω: {date_str}\n"
            history_text += f"üë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {raffle.get('participants_count', 0)}\n"
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π
            if raffle.get('winners'):
                for winner in raffle['winners'][:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 3
                    history_text += f"üèÜ {winner['position']} –º–µ—Å—Ç–æ: @{winner['user']['username'] or winner['user']['first_name']}\n"
                if len(raffle['winners']) > 3:
                    history_text += f"... –∏ –µ—â–µ {len(raffle['winners']) - 3} –ø–æ–±–µ–¥–∏—Ç–µ–ª–µ–π\n"
            
            history_text += "‚îÄ" * 30 + "\n\n"
        
        # Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç –≤ 4096 —Å–∏–º–≤–æ–ª–æ–≤
        if len(history_text) > 4000:
            history_text = history_text[:4000] + "\n\n... (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∏)"
        
        await message.answer(history_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error showing history: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

@dp.message(F.text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
async def show_info(message: types.Message):
    """–ü–æ–∫–∞–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    await message.answer(
        "‚ÑπÔ∏è **–û –±–æ—Ç–µ**\n\n"
        "–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è —á–µ—Å—Ç–Ω—ã—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –ø—Ä–∏–∑–æ–≤.\n\n"
        "**–ö–∞–∫ —ç—Ç–æ —Ä–∞–±–æ—Ç–∞–µ—Ç:**\n"
        "1Ô∏è‚É£ –í–∫–ª—é—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à–∏\n"
        "2Ô∏è‚É£ –ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã\n"
        "3Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å'\n"
        "4Ô∏è‚É£ –î–æ–∂–¥–∏—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤\n\n"
        "**–ì–∞—Ä–∞–Ω—Ç–∏–∏:**\n"
        "‚Ä¢ –í—Å–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏ –≤—ã–±–∏—Ä–∞—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º\n"
        "‚Ä¢ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—É–±–ª–∏–∫—É—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
        "‚Ä¢ –ü–æ–ª–Ω–∞—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –ø—Ä–æ—Ü–µ—Å—Å–∞\n"
        "‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –≤—Å–µ—Ö —Ä–æ–∑—ã–≥—Ä—ã—à–µ–π –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–∞–∂–¥–æ–º—É\n\n"
        "–£–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–∞—Ö! üçÄ",
        parse_mode="Markdown"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(F.text == "‚ûï –°–æ–∑–¥–∞—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à", F.from_user.id.in_(ADMIN_IDS))
async def create_raffle_start(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await state.set_state(RaffleStates.waiting_title)
    await message.answer(
        "üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n\n"
        "–®–∞–≥ 1/6: –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:",
        reply_markup=types.ReplyKeyboardRemove()
    )

@dp.message(RaffleStates.waiting_title)
async def process_title(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await state.update_data(title=message.text)
    await state.set_state(RaffleStates.waiting_description)
    await message.answer("–®–∞–≥ 2/6: –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (—á—Ç–æ —Ä–∞–∑—ã–≥—Ä—ã–≤–∞–µ—Ç—Å—è, —É—Å–ª–æ–≤–∏—è –∏ —Ç.–¥.):")

@dp.message(RaffleStates.waiting_description)
async def process_description(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    await state.update_data(description=message.text)
    await state.set_state(RaffleStates.waiting_photo)
    await message.answer("–®–∞–≥ 3/6: –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞ (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'):")

@dp.message(RaffleStates.waiting_photo)
async def process_photo(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
    if message.photo:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        photo_url = await upload_photo_to_api(message.photo[-1].file_id)
        await state.update_data(photo_url=photo_url)
    elif message.text and message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(photo_url='')
    else:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return
    
    await state.set_state(RaffleStates.waiting_channels)
    await message.answer(
        "–®–∞–≥ 4/6: –í–≤–µ–¥–∏—Ç–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n"
        "–§–æ—Ä–º–∞—Ç: @channel1 @channel2 @channel3\n"
        "(–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ —Ç—Ä–µ–±—É–µ—Ç—Å—è)"
    )

@dp.message(RaffleStates.waiting_channels)
async def process_channels(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤"""
    if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(channels='')
    else:
        channels = message.text.strip()
        await state.update_data(channels=channels)
    
    await state.set_state(RaffleStates.waiting_prizes)
    await message.answer(
        "–®–∞–≥ 5/6: –í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç:"
    )

@dp.message(RaffleStates.waiting_prizes)
async def process_prizes_count(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—Ä–∏–∑–æ–≤"""
    try:
        prizes_count = int(message.text)
        if prizes_count < 1:
            raise ValueError
        
        await state.update_data(prizes_count=prizes_count, prizes={}, current_prize=1)
        await state.set_state(RaffleStates.waiting_prize_details)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è 1 –º–µ—Å—Ç–∞:")
        
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç (–º–∏–Ω–∏–º—É–º 1)")

@dp.message(RaffleStates.waiting_prize_details)
async def process_prize_details(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–µ—Ç–∞–ª–µ–π –ø—Ä–∏–∑–æ–≤"""
    data = await state.get_data()
    current_prize = data['current_prize']
    prizes = data['prizes']
    prizes_count = data['prizes_count']
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –ø—Ä–∏–∑
    prizes[str(current_prize)] = message.text
    
    if current_prize < prizes_count:
        # –ï—â–µ –µ—Å—Ç—å –ø—Ä–∏–∑—ã –¥–ª—è –≤–≤–æ–¥–∞
        await state.update_data(prizes=prizes, current_prize=current_prize + 1)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–∑ –¥–ª—è {current_prize + 1} –º–µ—Å—Ç–∞:")
    else:
        # –í—Å–µ –ø—Ä–∏–∑—ã –≤–≤–µ–¥–µ–Ω—ã
        await state.update_data(prizes=prizes)
        await state.set_state(RaffleStates.waiting_end_datetime)
        await message.answer(
            "–®–∞–≥ 6/6: –í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞\n\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:00"
        )

@dp.message(RaffleStates.waiting_end_datetime)
async def process_end_datetime(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"""
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        end_date = datetime.strptime(message.text.strip(), "%d.%m.%Y %H:%M")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
        if end_date <= datetime.now():
            await message.answer("‚ùå –î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ
        data = await state.get_data()
        data['end_date'] = end_date
        
        # –°–æ–∑–¥–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à —á–µ—Ä–µ–∑ API
        loading_msg = await message.answer("‚è≥ –°–æ–∑–¥–∞—é —Ä–æ–∑—ã–≥—Ä—ã—à...")
        
        try:
            raffle = await api_client.create_raffle(data)
            
            await loading_msg.delete()
            await state.clear()
            
            keyboard = create_admin_keyboard()
            await message.answer(
                "‚úÖ –†–æ–∑—ã–≥—Ä—ã—à —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n"
                f"üìã –ù–∞–∑–≤–∞–Ω–∏–µ: {data['title']}\n"
                f"üìÖ –ó–∞–≤–µ—Ä—à–∏—Ç—Å—è: {end_date.strftime('%d.%m.%Y –≤ %H:%M')}\n"
                f"üèÜ –ü—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç: {data['prizes_count']}\n\n"
                "‚è∞ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –±—É–¥—É—Ç –ø–æ–¥–≤–µ–¥–µ–Ω—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!\n\n"
                "–°–µ–π—á–∞—Å –Ω–∞—á–Ω–µ—Ç—Å—è —Ä–∞—Å—Å—ã–ª–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...",
                reply_markup=keyboard
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            await send_raffle_notification(raffle['id'], data)
            
        except Exception as e:
            await loading_msg.delete()
            await message.answer(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞: {str(e)}\n\n"
                "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É.",
                reply_markup=create_admin_keyboard()
            )
            await state.clear()
        
    except ValueError:
        await message.answer(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 25.12.2024 18:00"
        )

async def send_raffle_notification(raffle_id: int, raffle_data: dict):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –Ω–æ–≤–æ–º —Ä–æ–∑—ã–≥—Ä—ã—à–µ"""
    users = db.get_users_with_notifications()
    
    # –ö–Ω–æ–ø–∫–∞ —Å Web App –¥–ª—è —É—á–∞—Å—Ç–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(
            text="üéØ –£—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å",
            web_app=types.WebAppInfo(url=f"{WEBAPP_URL}/raffle/{raffle_id}")
        )]
    ])
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –ø—Ä–∏–∑—ã
    prizes_text = "\n".join([f"{pos}. {prize}" for pos, prize in raffle_data['prizes'].items()])
    
    caption = (
        f"üéâ **–ù–æ–≤—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à!**\n\n"
        f"**{raffle_data['title']}**\n\n"
        f"{raffle_data['description']}\n\n"
        f"üèÜ **–ü—Ä–∏–∑—ã:**\n{prizes_text}\n\n"
        f"‚è∞ –î–æ {raffle_data['end_date'].strftime('%d.%m.%Y –≤ %H:%M')}"
    )
    
    success_count = 0
    for user_id in users:
        try:
            if raffle_data.get('photo_url'):
                await bot.send_photo(
                    chat_id=user_id,
                    photo=raffle_data['photo_url'],
                    caption=caption,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            else:
                await bot.send_message(
                    chat_id=user_id,
                    text=caption,
                    reply_markup=keyboard,
                    parse_mode="Markdown"
                )
            success_count += 1
            await asyncio.sleep(0.05)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤ –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö —Ä–∞—Å—Å—ã–ª–∫–∏
    for admin_id in ADMIN_IDS:
        try:
            await bot.send_message(
                admin_id,
                f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {success_count} –∏–∑ {len(users)} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"
            )
        except:
            pass

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
    logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º polling
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())