version: '3.8'

services:
  # ПЕРВЫЙ сервис - получает домен и должен отвечать на порту 80
  nginx:
    image: nginx:alpine
    expose: 
      - "80"  # ВАЖНО: expose, не ports!
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - backend
      - frontend-static
    command: ["nginx", "-g", "daemon off;"]
    restart: always

  # Статические файлы фронтенда
  frontend-static:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    volumes:
      - frontend-build:/app/build
    command: ["sh", "-c", "cp -r /usr/share/nginx/html/* /app/build/ && tail -f /dev/null"]
    restart: always

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    expose:
      - "8000"
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - BOT_TOKEN=${BOT_TOKEN}
      - WEBAPP_URL=${WEBAPP_URL}
      - SECRET_KEY=${SECRET_KEY}
      - ADMIN_IDS=${ADMIN_IDS}
      - ADMIN_API_KEY=${ADMIN_API_KEY}
      - TIMEZONE_OFFSET=${TIMEZONE_OFFSET}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - ENVIRONMENT=${ENVIRONMENT}
      - S3_ENDPOINT=${S3_ENDPOINT}
      - S3_ACCESS_KEY=${S3_ACCESS_KEY}
      - S3_SECRET_KEY=${S3_SECRET_KEY}
      - S3_BUCKET=${S3_BUCKET}
    restart: always
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Telegram bot
  bot:
    build:
      context: ./bot
      dockerfile: Dockerfile
    environment:
      - BOT_TOKEN=${BOT_TOKEN}
      - WEBAPP_URL=${WEBAPP_URL}
      - API_URL=http://backend:8000
      - ADMIN_IDS=${ADMIN_IDS}
    depends_on:
      - backend
    restart: always

volumes:
  frontend-build: