import asyncio
from typing import List, Dict, Optional
from datetime import datetime
import logging

from ..services.telegram import TelegramService
from ..database import async_session_maker
from ..models import User, Raffle, Participant
from sqlalchemy import select

logger = logging.getLogger(__name__)

class NotificationService:
    """Service for managing notifications"""
    
    @staticmethod
    async def notify_new_raffle(raffle_id: int, raffle_data: dict):
        """Send notification about new raffle to all users with notifications enabled"""
        async with async_session_maker() as db:
            # Get users with notifications enabled
            result = await db.execute(
                select(User).where(User.notifications_enabled == True)
            )
            users = result.scalars().all()
            
            if not users:
                logger.info("No users with notifications enabled")
                return
            
            user_ids = [user.telegram_id for user in users]
            
            # Send notifications
            await TelegramService.notify_new_raffle(
                raffle_id,
                user_ids,
                raffle_data
            )
            
            logger.info(f"Sent new raffle notifications to {len(user_ids)} users")
    
    @staticmethod
    async def notify_raffle_starting(raffle_id: int):
        """Notify participants and subscribers that raffle is starting"""
        async with async_session_maker() as db:
            # Get raffle
            raffle_result = await db.execute(
                select(Raffle).where(Raffle.id == raffle_id)
            )
            raffle = raffle_result.scalar_one_or_none()
            
            if not raffle:
                logger.error(f"Raffle {raffle_id} not found")
                return
            
            # Get participants
            participants_result = await db.execute(
                select(User).join(Participant).where(
                    Participant.raffle_id == raffle_id
                )
            )
            participants = participants_result.scalars().all()
            participant_ids = [p.telegram_id for p in participants]
            
            # Get users with notifications
            notif_result = await db.execute(
                select(User).where(User.notifications_enabled == True)
            )
            notif_users = notif_result.scalars().all()
            notif_ids = [u.telegram_id for u in notif_users]
            
            # Combine and deduplicate
            all_user_ids = list(set(participant_ids + notif_ids))
            
            # Send notifications to users
            await TelegramService.notify_raffle_start(
                raffle_id,
                all_user_ids,
                {
                    "title": raffle.title,
                    "photo_url": raffle.photo_url
                }
            )
            
            # –ù–û–í–û–ï: –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª—ã –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            if raffle.post_channels:
                await NotificationService.notify_channels_raffle_start(
                    raffle_id,
                    raffle.title,
                    raffle.photo_url,
                    raffle.post_channels
                )
            
            logger.info(f"Sent raffle start notifications to {len(all_user_ids)} users")

    @staticmethod
    async def notify_channels_raffle_start(raffle_id: int, title: str, photo_url: str, channels: List[str]):
        """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –æ –Ω–∞—á–∞–ª–µ —Ä–æ–∑—ã–≥—Ä—ã—à–∞"""
        import os
        BOT_TOKEN = os.getenv("BOT_TOKEN")
        WEBAPP_URL = os.getenv("WEBAPP_URL")
        
        text = (
            f"üé∞ **–†–æ–∑—ã–≥—Ä—ã—à –Ω–∞—á–∞–ª—Å—è!**\n\n"
            f"**{title}**\n\n"
            f"–ü—Ä—è–º–æ —Å–µ–π—á–∞—Å –æ–ø—Ä–µ–¥–µ–ª—è—é—Ç—Å—è –ø–æ–±–µ–¥–∏—Ç–µ–ª–∏!\n"
            f"–°–º–æ—Ç—Ä–∏—Ç–µ live-—Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—é —Ä–æ–∑—ã–≥—Ä—ã—à–∞!"
        )
        
        keyboard = {
            "inline_keyboard": [[{
                "text": "üé∞ –°–º–æ—Ç—Ä–µ—Ç—å —Ä–æ–∑—ã–≥—Ä—ã—à",
                "url": f"{WEBAPP_URL}/raffle/{raffle_id}/live"
            }]]
        }
        
        import aiohttp
        
        for channel in channels:
            channel = channel.replace('@', '')
            try:
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/"
                
                if photo_url and photo_url.startswith('http'):
                    data = {
                        "chat_id": f"@{channel}",
                        "photo": photo_url,
                        "caption": text,
                        "parse_mode": "Markdown",
                        "reply_markup": keyboard
                    }
                    method = "sendPhoto"
                else:
                    data = {
                        "chat_id": f"@{channel}",
                        "text": text,
                        "parse_mode": "Markdown",
                        "reply_markup": keyboard
                    }
                    method = "sendMessage"
                
                async with aiohttp.ClientSession() as session:
                    async with session.post(url + method, json=data) as response:
                        result = await response.json()
                        if not result.get("ok"):
                            logger.error(f"Failed to notify channel @{channel}: {result}")
                        else:
                            logger.info(f"Successfully notified channel @{channel} about raffle start")
                            
            except Exception as e:
                logger.error(f"Error notifying channel @{channel}: {e}")
    
    @staticmethod
    async def notify_winners(raffle_id: int, winners: List[Dict]):
        """Notify winners about their prizes"""
        for winner in winners:
            try:
                text = (
                    f"üéâ **–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º!**\n\n"
                    f"–í—ã –∑–∞–Ω—è–ª–∏ **{winner['position']} –º–µ—Å—Ç–æ** –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ –∏ –≤—ã–∏–≥—Ä–∞–ª–∏:\n"
                    f"**{winner['prize']}**\n\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–∑–∞!"
                )
                
                await TelegramService.send_notification(
                    winner['user']['id'],
                    text
                )
                
                await asyncio.sleep(0.1)  # Rate limiting
            except Exception as e:
                logger.error(f"Error notifying winner {winner['user']['id']}: {e}")
    
    @staticmethod
    async def notify_channel_check_reminder(raffle_id: int):
        """Send reminder to check channel subscriptions before raffle ends"""
        async with async_session_maker() as db:
            # Get participants who might need to verify subscriptions
            result = await db.execute(
                select(User, Raffle).join(Participant).join(Raffle).where(
                    Participant.raffle_id == raffle_id
                )
            )
            data = result.all()
            
            for user, raffle in data:
                # Check if user is still subscribed to all channels
                all_subscribed = True
                for channel in raffle.channels:
                    is_subscribed = await TelegramService.check_channel_subscription(
                        user.telegram_id,
                        channel
                    )
                    if not is_subscribed:
                        all_subscribed = False
                        break
                
                if not all_subscribed:
                    text = (
                        f"‚ö†Ô∏è **–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ**\n\n"
                        f"–†–æ–∑—ã–≥—Ä—ã—à '{raffle.title}' —Å–∫–æ—Ä–æ –∑–∞–≤–µ—Ä—à–∏—Ç—Å—è!\n"
                        f"–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–∞–Ω–∞–ª—ã, "
                        f"–∏–Ω–∞—á–µ –≤—ã –Ω–µ —Å–º–æ–∂–µ—Ç–µ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ."
                    )
                    
                    await TelegramService.send_notification(
                        user.telegram_id,
                        text
                    )
                    
                    await asyncio.sleep(0.1)